datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id      String    @id @default(cuid()) @map("_id")
  name    String    @unique
  product Product[]
}

model Product {
  id              String     @id @default(cuid()) @map("_id")
  name            String
  price           String
  description     String
  quantity        Int
  image           String[]
  classify        Classify[]
  createAt        DateTime   @default(now()) @db.Timestamp
  updateAt        DateTime   @updatedAt @db.Timestamp
  parentProduct   Product?   @relation("productChild", fields: [parentProductId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentProductId String?
  productChild    Product[]  @relation("productChild")
  category        Category?  @relation(fields: [categoryId], references: [id])
  categoryId      String?
  cartItem        CartItem[]
}

model Classify {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  value     String[]
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Role {
  id         String       @id @default(cuid()) @map("_id")
  name       String       @unique
  permission Permission[]
}

model Permission {
  id     String  @id @default(cuid()) @map("_id")
  name   String  @unique
  role   Role?   @relation(fields: [roleId], references: [id])
  roleId String?
}

model Cart {
  id       String     @id @default(cuid()) @map("_id")
  cartItem CartItem[]
  user     User       @relation(fields: [userId], references: [id])
  userId   String     @unique
  status   String
}

model CartItem {
  id        String  @id @default(cuid()) @map("_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  cart      Cart?   @relation(fields: [cartId], references: [id])
  cartId    String?
}
