datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("customer")
  accounts      Account[]
  sessions      Session[]
  order         Order[]
  address       Address[]
  cart          Cart?
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id      String    @id @default(cuid()) @map("_id")
  name    String    @unique
  product Product[]
}

model Address {
  id        String  @id @default(cuid()) @map("_id")
  name      String
  phone     String
  location  String
  address   String
  isDefault Boolean
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  order     Order[]
}

model Product {
  id              String      @id @default(cuid()) @map("_id")
  name            String
  description     String
  size            String
  quantity        Int
  image           String[]
  status          String
  cost            Int
  price           Int
  createAt        DateTime    @default(now()) @db.Timestamp
  updateAt        DateTime    @updatedAt @db.Timestamp
  category        Category?   @relation(fields: [categoryId], references: [id])
  categoryId      String?
  parentProduct   Product?    @relation("productChild", fields: [parentProductId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentProductId String?
  productChild    Product[]   @relation("productChild")
  orderItem       OrderItem[]
}

model Cart {
  id       String      @id @default(cuid()) @map("_id")
  cartItem OrderItem[]
  user     User        @relation(fields: [userId], references: [id])
  userId   String      @unique
}

model Order {
  id        String      @id @default(cuid()) @map("_id")
  orderItem OrderItem[]
  status    String
  total     Int
  address   Address     @relation(fields: [addressId], references: [id])
  customer  User        @relation(fields: [userId], references: [id])
  createAt  DateTime    @default(now()) @db.Timestamp
  updateAt  DateTime    @updatedAt @db.Timestamp
  userId    String
  addressId String
}

model OrderItem {
  id        String  @id @default(cuid()) @map("_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  productId String
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
  Cart      Cart?   @relation(fields: [cartId], references: [id])
  cartId    String?
}
